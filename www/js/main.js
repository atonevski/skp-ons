// Generated by CoffeeScript 2.3.2
var mph2kmph, mps2kmph, renderHome, weatherIconFor, windBearingIcon;

window.fn = {};

window.fn.selected = 'home';

window.fn.open = function() {
  var menu;
  menu = $('#menu')[0];
  return menu.open();
};

window.fn.load = function(page) {
  var content, menu;
  content = $('#content')[0];
  menu = $('#menu')[0];
  return content.load(page).then(menu.close.bind(menu));
};

window.fn.loadHome = function() {
  var content, menu;
  content = $('#content')[0];
  menu = $('#menu')[0];
  return content.load('views/home.html').then(menu.close.bind(menu)).then(function() {
    return renderHome();
  });
};

// miles per hour to kilometers per hour
mph2kmph = function(m) {
  return m * 1.609344;
};

// meters per second to kilometers per hour
mps2kmph = function(m) {
  return 3600.0 * m / 1000;
};

weatherIconFor = function(i) {
  switch (i) {
    case 'clear-day':
      return 'wi-day-sunny';
    case 'clear-night':
      return 'wi-night-clear';
    case 'rain':
      return 'wi-rain';
    case 'snow':
      return 'wi-snow';
    case 'sleet':
      return 'wi-sleet';
    case 'wind':
      return 'wi-strong-wind';
    case 'fog':
      return 'wi-fog';
    case 'cloudy':
      return 'wi-cloudy';
    case 'partly-cloudy-day':
      return 'wi-day-cloudy';
    case 'partly-cloudy-night':
      return 'wi-night-alt-partly-cloudy';
    case 'hail':
      return 'wi-hail';
    case 'thunderstorm':
      return 'wi-thunderstorm';
    case 'tornado':
      return 'wi-tornado';
    default:
      return 'wi-na';
  }
};

windBearingIcon = function(b) {
  switch (false) {
    case !((0 <= b && b < 23)):
      return 'from-0-deg';
    case !((23 <= b && b < 45)):
      return 'from-23-deg';
    case !((45 <= b && b < 68)):
      return 'from-45-deg';
    case !((68 <= b && b < 90)):
      return 'from-68-deg';
    case !((90 <= b && b < 113)):
      return 'from-90-deg';
    case !((113 <= b && b < 135)):
      return 'from-113-deg';
    case !((135 <= b && b < 158)):
      return 'from-135-deg';
    case !((158 <= b && b < 180)):
      return 'from-158-deg';
    case !((180 <= b && b < 203)):
      return 'from-180-deg';
    case !((203 <= b && b < 225)):
      return 'from-203-deg';
    case !((225 <= b && b < 248)):
      return 'from-225-deg';
    case !((248 <= b && b < 270)):
      return 'from-248-deg';
    case !((270 <= b && b < 293)):
      return 'from-270-deg';
    case !((293 <= b && b < 313)):
      return 'from-293-deg';
    case !((313 <= b && b < 336)):
      return 'from-313-deg';
    case !(336 <= b):
      return 'from-336-deg';
  }
};

renderHome = function() {
  var KEY, LAT, LNG, url;
  window.fn.selected = 'home';
  KEY = '6376c1cdba2fa461f346e9a27524406d';
  LAT = 42;
  LNG = 21.43;
  url = `https://api.darksky.net/forecast/${KEY}/${LAT},${LNG}?units=si`;
  return $.ajax({
    url: url,
    method: 'GET'
  }).done(function(d) {
    var item, list, rtitle;
    // console.log d
    window.fn.weather = d;
    $('p#temp').html(`${Math.round(d.currently.temperature)}&deg;C`);
    rtitle = $('div#home-title-right').empty();
    rtitle.html(`<i class='wi ${weatherIconFor(d.currently.icon)}'></i>\n<span>${Math.round(d.currently.temperature)}&deg;C</span>`);
    list = $('ons-list#current-values');
    list.empty();
    // time
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class="wi wi-time-10"></i>\n    </ons-icon>\n  </div>\n  <div class='center'>\n    <strong>Time:</strong>&nbsp;\n    <small>\n      ${((new Date(d.currently.time * 1000)).toString().slice(0, 24))}&nbsp;\n      ${d.timezone}\n    </small>\n  </div>\n</ons-list-item>`);
    list.append(item);
    // summary
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class='wi ${weatherIconFor(d.currently.icon)}'></i>\n    </ons-icon>\n  </div>\n  <div class='center'>\n    <strong>Summary:</strong>&nbsp;\n    ${d.currently.summary}\n  </div>\n</ons-list-item>`);
    list.append(item);
    // apparent temp.
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class='wi wi-thermometer'></i>\n    </ons-icon>\n  </div>\n  <div class='center'>\n    <strong>Apparent temperature:</strong>&nbsp;\n      ${Math.round(d.currently.apparentTemperature)}&degC;\n  </div>\n</ons-list-item>`);
    list.append(item);
    // humidity
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class='wi wi-humidity'></i>\n    </ons-icon>\n  </div>\n  <div class='center'>\n    <strong>Humidity:</strong>&nbsp;\n    ${Math.round(d.currently.humidity * 100)}%\n  </div>\n</ons-list-item>`);
    list.append(item);
    // pressure
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class='wi wi-barometer'></i>\n    </ons-icon>\n  </div>\n    <strong>Pressure:</strong>&nbsp;\n    ${Math.round(d.currently.pressure)}&nbsp;hPa\n</ons-list-item>`);
    list.append(item);
    // cloud cover
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class='wi wi-day-cloudy-high'></i>\n    </ons-icon>\n  </div>\n    <strong>Cloud cover:</strong>&nbsp;\n    ${Math.round(d.currently.cloudCover * 100)}%\n</ons-list-item>`);
    list.append(item);
    // visibility
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class="far fa-eye"></i>\n    </ons-icon>\n  </div>\n    <strong>Visibility:</strong>&nbsp;\n    ${d.currently.visibility}&nbsp;km\n</ons-list-item>`);
    list.append(item);
    // precipitation
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class='wi wi-raindrops'></i>\n    </ons-icon>\n  </div>\n  <div class='center'>\n    <strong>Precipitation:</strong>&nbsp;\n    ${Math.round(d.currently.precipProbability * 100)}%\n  </div>\n</ons-list-item>`);
    list.append(item);
    // wind returned is m/sec ~  60*60/1000 k/h
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class='wi wi-strong-wind'></i>\n    </ons-icon>\n  </div>\n  <div class='center'>\n    <strong>Wind:</strong>&nbsp;\n    ${(3.6 * d.currently.windSpeed).toFixed(2)}&nbsp;km/h\n  </div>\n</ons-list-item>`);
    list.append(item);
    // wind bearing
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class='wi wi-wind ${windBearingIcon(d.currently.windBearing)}'></i>\n    </ons-icon>\n  </div>\n  <div class='center'>\n    <strong>Wind bearing:</strong>&nbsp;\n    ${d.currently.windBearing}&deg;\n    <small>(0&deg;: north, clockwise)</small>\n  </div>\n</ons-list-item>`);
    list.append(item);
    // ozone
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class="far fa-circle"></i><sub><small>3</small></sub>\n    </ons-icon>\n  </div>\n  <div class='center'>\n    <strong>Ozone:</strong>&nbsp;\n    ${Math.round(d.currently.ozone)}&nbsp;\n    <small>(harmful: 100&ndash;315)</small>\n  </div>\n</ons-list-item>`);
    list.append(item);
    // uv idx
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon icon="fa-sun" class="list-item__icon"></ons-icon>\n  </div>\n  <div class='center'>\n    <strong>UV index:</strong>&nbsp;\n    ${d.currently.uvIndex}\n  </div>\n</ons-list-item>`);
    list.append(item);
    // sunrise
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class="wi wi-sunrise"></i>\n    </ons-icon>\n  </div>\n  <div class='center'>\n    <strong>Sunrise:</strong>&nbsp;\n    <small>${((new Date(d.daily.data[0].sunriseTime * 1000)).toString().slice(16, 24))}</small>\n  </div>\n</ons-list-item>`);
    list.append(item);
    // sunrise
    item = ons.createElement(`<ons-list-item class='open-sans'>\n  <div class="left">\n    <ons-icon class="list-item__icon">\n      <i class="wi wi-sunset"></i>\n    </ons-icon>\n  </div>\n  <div classs='center'>\n    <strong>Sunset:</strong>&nbsp;\n    <small>${((new Date(d.daily.data[0].sunsetTime * 1000)).toString().slice(16, 24))}</small>\n  </div>\n</ons-list-item>`);
    return list.append(item);
  });
};

ons.ready(function() {
  // cordova stuff
  fn.loadHome();
  if (typeof cordova === "undefined" || cordova === null) {
    return ons.notification.toast("Cordova not loaded", {
      timeout: 5000
    });
  }
});
